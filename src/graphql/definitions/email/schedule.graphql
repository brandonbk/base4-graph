type Query {
  emailSchedule(input: ModelStringIdInput!): EmailSchedule!
}

type EmailSchedule implements PlatformSchedule {
  # fields required by the PlatformSchedule GraphQL interface
  id: String! @value(localField: "_id")
  content(input: EmailScheduleContentInput = {}): PlatformContent @refOne(model: "platform.Content")
  status: Int

  # fields directly on email.model::Schedule
  product(input: EmailScheduleProductInput = {}): EmailProductNewsletter @refOne(model: "platform.Product", criteria: { type: "Newsletter" })
  section(input: EmailScheduleSectionInput = {}): EmailSection @refOne(model: "email.Section")
  deploymentDate: Date
  sequence: Int
  contentStatus: Int
}

input EmailScheduleContentInput {
  status: ReferenceStatus = all
}

input EmailScheduleProductInput {
  status: ReferenceStatus = active
}

input EmailScheduleSectionInput {
  status: ReferenceStatus = active
}
