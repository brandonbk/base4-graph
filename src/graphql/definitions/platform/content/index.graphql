# import * from 'article.graphql'
# import * from 'company.graphql'
# import * from 'contact.graphql'

type Query {
  platformContent(input: ModelIdInput!): PlatformContent!
}

type PlatformContentStubSidebar {
  body: String
}

type PlatformContentStubLocation {
  latitude: Float
  longitude: Float
}

enum PlatformContentMutation {
  Website
  Magazine
  Email
}

interface PlatformContent {
  # fields directly on platform.model::Content
  id: Int! @value(localField: "_id")
  type: String!
  name: String
  shortName: String
  fullName: String # should be calculated in resolvers
  hash: String
  created: Date
  updated: Date
  touched: Date
  published: Date
  unpublished: Date
  createdBy: PlatformSecurityUser @refOne(model: "platform.User")
  updatedBy: PlatformSecurityUser @refOne(model: "platform.User")

  # fields from platform.trait::StatusEnabled
  status: Int

  # fields from platform.trait::Content\BodyFields
  teaser: String
  body: String
  notes: String

  # fields from platform.trait::Taggable
  taxonomy: [PlatformTaxonomy] # add args?

  # fields from platform.trait::ContentRelateable
  relatedTo: [PlatformContent] # add args?

  # fields from platform.trait::MediaRelatable
  primaryImage: PlatformAssetImage @refOne(model: "platform.Asset", criteria: { type: "Image" })
  images(input: PlatformContentImagesInput = {}): PlatformAssetImageConnection @refMany(model: "platform.Asset", criteria: { type: "Image" })

  # fields from platform.model::Content mutations
  schedules(mutation: PlatformContentMutation = Website): [WebsiteSchedule] # add sort args? change respose to support multiple mutations
  primarySite(input: PlatformContentPrimarySiteInput = {}): WebsiteProductSite @refOne(model: "platform.Product", localField: "mutations.Website.primarySite", criteria: { type: "Site" })
  primarySection(input: PlatformContentPrimarySectionInput = {}): WebsiteSection @refOne(model: "platform.Product", localField: "mutations.Website.primarySection")

  # fields from platform.trait::Content\SeoFields
  seoTitle: String @value(localField: "mutations.Website.seoTitle", fallbackField: "name")
  alias: String @value(localField: "mutations.Website.alias")
  redirects: [String]! @arrayValue(localField: "mutations.Website.redirects")
  slug: String @value(localField: "mutations.Website.slug")
}

interface PlatformContentContactable {
  phone: String
  tollfree: String
  fax: String
  website: String
  email: String
  firstName: String
  lastName: String
  company: PlatformContentCompany
  title: String
  mobile: String
  publicEmail: String
}

interface PlatformContentAddressable {
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  location: PlatformContentStubLocation
}

interface PlatformContentAuthorable {
  authors: [PlatformContentContact] # add args?
  contributors: [PlatformContentContact] # add args?
  photographers: [PlatformContentContact] # add args?
}

input PlatformContentImagesInput {
  sort: PlatformAssetImageSortInput = {}
  pagination: PaginationInput = {}
}

input PlatformContentPrimarySiteInput {
  status: ReferenceStatus = active
}

input PlatformContentPrimarySectionInput {
  status: ReferenceStatus = active
}
