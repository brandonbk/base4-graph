type PlatformContentArticle implements PlatformContent & PlatformContentAuthorable {
  # fields required by the PlatfomContent GraphQL interface
  id: Int! @value(localField: "_id")
  type: String!
  name: String
  shortName: String
  fullName: String
  hash: String
  created: Date
  updated: Date
  touched: Date
  published: Date
  unpublished: Date
  createdBy: PlatformSecurityUser @refOne(model: "platform.User")
  updatedBy: PlatformSecurityUser @refOne(model: "platform.User")
  status: Int
  teaser: String
  body: String
  notes: String
  taxonomy(input: PlatformContentTaxonomyInput = {}): PlatformTaxonomyConnection! @refMany(model: "platform.Taxonomy")
  relatedTo: [PlatformContent] # add args?
  primaryImage: PlatformAssetImage @refOne(model: "platform.Asset", criteria: { type: "Image" })
  images(input: PlatformContentImagesInput = {}): PlatformAssetImageConnection! @refMany(model: "platform.Asset", criteria: { type: "Image" })
  schedules(mutation: PlatformContentMutation = Website): [WebsiteSchedule] # add sort args? change respose to support multiple mutations
  primarySite(input: PlatformContentPrimarySiteInput = {}): WebsiteProductSite @refOne(model: "platform.Product", localField: "mutations.Website.primarySite", criteria: { type: "Site" })
  primarySection(input: PlatformContentPrimarySectionInput = {}): WebsiteSection @refOne(model: "platform.Product", localField: "mutations.Website.primarySection")
  seoTitle: String @value(localField: "mutations.Website.seoTitle", fallbackField: "name")
  alias: String @value(localField: "mutations.Website.alias")
  redirects: [String]! @arrayValue(localField: "mutations.Website.redirects")
  slug: String @value(localField: "mutations.Website.slug")

  # fields directly on platform.model::Content\Article
  sidebars: [PlatformContentStubSidebar]! @arrayValue

  # fields directly on platform.model::Content\Article mutations
  deck: String

  # fields from platform.trait::Content\Authorable
  authors: [PlatformContentContact] # add args?
  contributors: [PlatformContentContact] # add args?
  photographers: [PlatformContentContact] # add args?
}
