type PlatformContentArticle implements PlatformContent & PlatformContentAuthorable {
  # fields required by the PlatfomContent GraphQL interface
  id: Int! @value(localField: "_id")
  type: String!
  name: String
  shortName: String
  fullName: String
  hash: String
  created: Date
  updated: Date
  touched: Date
  published: Date
  unpublished: Date
  createdBy: PlatformSecurityUser
  updatedBy: PlatformSecurityUser
  status: Int
  teaser: String
  body: String
  notes: String
  taxonomy: [PlatformTaxonomy] # add args?
  relatedTo: [PlatformContent] # add args?
  primaryImage: PlatformAssetImage
  images(input: PlatformContentImagesInput = {}): PlatformAssetImageConnection @refMany(model: "platform.Asset", criteria: { type: "Image" })
  schedules(mutation: PlatformContentMutation = Website): [WebsiteSchedule] # add sort args? change respose to support multiple mutations
  primarySite: WebsiteProductSite
  primarySection: WebsiteSection
  seoTitle: String
  alias: String @value(localField: "mutations.Website.alias")
  redirects: [String]
  slug: String @value(localField: "mutations.Website.slug")

  # fields directly on platform.model::Content\Article
  sidebars: [PlatformContentStubSidebar]

  # fields directly on platform.model::Content\Article mutations
  deck: String

  # fields from platform.trait::Content\Authorable
  authors: [PlatformContentContact] # add args?
  contributors: [PlatformContentContact] # add args?
  photographers: [PlatformContentContact] # add args?
}
