type PlatformContentBlog implements PlatformContent {
  # fields required by the PlatfomContent GraphQL interface
  id: Int! @value(localField: "_id")
  type: PlatformContentType!
  name(input: PlatformContentMutationInput = {}): String @mutatedValue
  shortName: String
  fullName: String
  hash: String
  created: Date
  updated: Date
  touched: Date
  published: Date
  unpublished: Date
  createdBy: PlatformSecurityUser @refOne(model: "platform.User")
  updatedBy: PlatformSecurityUser @refOne(model: "platform.User")
  status: Int
  teaser(input: PlatformContentMutationInput = {}): String @mutatedValue
  body(input: PlatformContentMutationInput = {}): String @mutatedValue
  notes: String
  taxonomy(input: RelatedPlatformTaxonomyInput = {}): PlatformTaxonomyConnection! @refMany(model: "platform.Taxonomy")
  relatedTo: [PlatformContent] # add args?
  primaryImage: PlatformAssetImage @refOne(model: "platform.Asset", criteria: { type: "Image" })
  images(input: RelatedPlatformAssetImagesInput = {}): PlatformAssetImageConnection! @refMany(model: "platform.Asset", criteria: { type: "Image" })
  schedules: PlatformContentSchedules! @passThru
  primarySite(input: ReferenceStatusInput = {}): WebsiteProductSite @refOne(model: "platform.Product", localField: "mutations.Website.primarySite", criteria: { type: "Site" })
  primarySection(input: ReferenceStatusInput = {}): WebsiteSection @refOne(model: "platform.Product", localField: "mutations.Website.primarySection")
  seoTitle: String @value(localField: "mutations.Website.seoTitle", fallbackField: "name")
  alias: String @value(localField: "mutations.Website.alias")
  redirects: [String]! @arrayValue(localField: "mutations.Website.redirects")
  slug: String @value(localField: "mutations.Website.slug")

  # fields from platform.trait::Content\Authorable
  authors(input: RelatedPlatformContentInput = {}): PlatformContentContactConnection! @refMany(model: "platform.Content")
  contributors(input: RelatedPlatformContentInput = {}): PlatformContentContactConnection! @refMany(model: "platform.Content")
  photographers(input: RelatedPlatformContentInput = {}): PlatformContentContactConnection! @refMany(model: "platform.Content")
}
