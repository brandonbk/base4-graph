type PlatformContentContact implements PlatformContent {
  # fields required by the PlatfomContent GraphQL interface
  id: Int! @value(localField: "_id")
  type: PlatformContentType!
  name: String
  shortName: String
  fullName: String
  hash: String
  created: Date
  updated: Date
  touched: Date
  published: Date
  unpublished: Date
  createdBy: PlatformSecurityUser @refOne(model: "platform.User")
  updatedBy: PlatformSecurityUser @refOne(model: "platform.User")
  status: Int
  teaser: String
  body: String
  notes: String
  taxonomy(input: PlatformContentTaxonomyInput = {}): PlatformTaxonomyConnection! @refMany(model: "platform.Taxonomy")
  relatedTo: [PlatformContent] # add args?
  primaryImage: PlatformAssetImage @refOne(model: "platform.Asset", criteria: { type: "Image" })
  images(input: PlatformContentImagesInput = {}): PlatformAssetImageConnection! @refMany(model: "platform.Asset", criteria: { type: "Image" })
  schedules(mutation: PlatformContentMutation = Website): [WebsiteSchedule] # add sort args? change respose to support multiple mutations
  primarySite(input: PlatformContentPrimarySiteInput = {}): WebsiteProductSite @refOne(model: "platform.Product", localField: "mutations.Website.primarySite", criteria: { type: "Site" })
  primarySection(input: PlatformContentPrimarySectionInput = {}): WebsiteSection @refOne(model: "platform.Product", localField: "mutations.Website.primarySection")
  seoTitle: String @value(localField: "mutations.Website.seoTitle", fallbackField: "name")
  alias: String @value(localField: "mutations.Website.alias")
  redirects: [String]! @arrayValue(localField: "mutations.Website.redirects")
  slug: String @value(localField: "mutations.Website.slug")

  # fields directly on platform.model::Content\Contact
  socialLinks: [PlatformEntityStubSocial]! @arrayValue

  # fields from platform.trait::Content\Contactable
  phone: String
  tollfree: String
  fax: String
  website: String
  email: String
  firstName: String
  lastName: String
  company: PlatformContentCompany
  title: String
  mobile: String
  publicEmail: String

  # fields from platform.trait::Content\Addressable
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  location: PlatformContentStubLocation
}

type PlatformContentContactConnection {
  totalCount: Int!
  edges: [PlatformContentContactEdge]!
  pageInfo: PageInfo!
}

type PlatformContentContactEdge {
  node: PlatformContentContact!
  cursor: Cursor!
}

enum PlatformContentContactSortField {
  id
  name
  fullName
  created
  updated
  published
  touched
  lastName
  firstName
}

input PlatformContentContactSortInput {
  field: PlatformContentContactSortField = name
  order: SortOrder = asc
}
