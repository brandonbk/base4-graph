type Query {
  magazineSection(input: ModelIdInput!): MagazineSection!
}

type MagazineSection implements PlatformSection {
  # fields required by the PlatformSection GraphQL interface
  id: Int! @value(localField: "_id")
  name: String
  description: String
  fullName: String
  status: Int
  sequence: Int

  # fields directly on magazine.model::Section
  publication(input: ReferenceActiveStatusInput = {}): MagazineProductPublication @refOne(model: "platform.Product", criteria: { type: "Publication" })
  issue(input: ReferenceActiveStatusInput = {}): MagazineIssue @refOne(model: "magazine.Issue")
}

type MagazineSectionConnection {
  totalCount: Int!
  edges: [MagazineSectionEdge]!
  pageInfo: PageInfo!
}

type MagazineSectionEdge {
  node: MagazineSection!
  cursor: Cursor!
}

enum MagazineSectionSortField {
  id
  name
  fullName
  sequence
}

input MagazineSectionSortInput {
  field: MagazineSectionSortField = name
  order: SortOrder = asc
}

input RelatedMagazineSectionsInput {
  status: ReferenceStatus = active
  sort: MagazineSectionSortInput = {}
  pagination: PaginationInput = {}
}
