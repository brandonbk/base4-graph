# import * from 'article.graphql'
# import * from 'company.graphql'
# import * from 'contact.graphql'

type Query {
  platformContent(input: ModelIdInput!): PlatformContent!
}

type PlatformContentStubSidebar {
  body: String
}

type PlatformContentStubLocation {
  latitude: Float
  longitude: Float
}

interface PlatformContent {
  id: Int!
  type: String!
  status: Int

  name: String
  shortName: String
  fullName: String # should be calculated in resolvers
  teaser: String
  body: String

  created: Date
  updated: Date
  published: Date
  unpublished: Date

  createdBy: PlatformSecurityUser
  updatedBy: PlatformSecurityUser

  taxonomy: [PlatformTaxonomy] # add args?
  relatedTo: [PlatformContent] # add args?

  primaryImage: PlatformAssetImage
  images: [PlatformAssetImage] # add args?

  # from mutations + model::Content
  websiteSchedules: [WebsiteSchedule] # add args? was mutations.Website.schedules
  primarySite: WebsiteProductSite
  primarySection: WebsiteSection

  # from mutations + trait::Content\SeoFields
  seoTitle: String
  alias: String
  redirects: [String]
  slug: String
}

interface PlatformContentContactable {
  phone: String
  tollfree: String
  fax: String
  website: String
  email: String
  firstName: String
  lastName: String
  company: PlatformContentCompany
  title: String
  mobile: String
  publicEmail: String
}

interface PlatformContentAddressable {
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  location: PlatformContentStubLocation
}

interface PlatformContentAuthorable {
  authors: [PlatformContentContact] # add args?
  contributors: [PlatformContentContact] # add args?
  photographers: [PlatformContentContact] # add args?
}
